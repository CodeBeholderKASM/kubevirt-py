# coding: utf-8

"""


    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version:

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1VMReplicaSetSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, replicas=None, selector=None, template=None, paused=None):
        """
        V1VMReplicaSetSpec - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'replicas': 'int',
            'selector': 'V1LabelSelector',
            'template': 'V1VMTemplateSpec',
            'paused': 'bool'
        }

        self.attribute_map = {
            'replicas': 'replicas',
            'selector': 'selector',
            'template': 'template',
            'paused': 'paused'
        }

        self._replicas = replicas
        self._selector = selector
        self._template = template
        self._paused = paused

    @property
    def replicas(self):
        """
        Gets the replicas of this V1VMReplicaSetSpec.
        Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. +optional

        :return: The replicas of this V1VMReplicaSetSpec.
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """
        Sets the replicas of this V1VMReplicaSetSpec.
        Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. +optional

        :param replicas: The replicas of this V1VMReplicaSetSpec.
        :type: int
        """

        self._replicas = replicas

    @property
    def selector(self):
        """
        Gets the selector of this V1VMReplicaSetSpec.
        Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. +optional

        :return: The selector of this V1VMReplicaSetSpec.
        :rtype: V1LabelSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """
        Sets the selector of this V1VMReplicaSetSpec.
        Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. +optional

        :param selector: The selector of this V1VMReplicaSetSpec.
        :type: V1LabelSelector
        """

        self._selector = selector

    @property
    def template(self):
        """
        Gets the template of this V1VMReplicaSetSpec.
        Template describes the pods that will be created.

        :return: The template of this V1VMReplicaSetSpec.
        :rtype: V1VMTemplateSpec
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this V1VMReplicaSetSpec.
        Template describes the pods that will be created.

        :param template: The template of this V1VMReplicaSetSpec.
        :type: V1VMTemplateSpec
        """

        self._template = template

    @property
    def paused(self):
        """
        Gets the paused of this V1VMReplicaSetSpec.
        Indicates that the replica set is paused. +optional

        :return: The paused of this V1VMReplicaSetSpec.
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """
        Sets the paused of this V1VMReplicaSetSpec.
        Indicates that the replica set is paused. +optional

        :param paused: The paused of this V1VMReplicaSetSpec.
        :type: bool
        """

        self._paused = paused

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
