# coding: utf-8

"""


    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version:

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1Interface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address=None, type=None, source=None, target=None, model=None, mac=None, bandwidth=None, boot=None, link=None, filter_ref=None, alias=None):
        """
        V1Interface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'V1Address',
            'type': 'str',
            'source': 'V1InterfaceSource',
            'target': 'V1InterfaceTarget',
            'model': 'V1Model',
            'mac': 'V1MAC',
            'bandwidth': 'V1BandWidth',
            'boot': 'V1BootOrder',
            'link': 'V1LinkState',
            'filter_ref': 'V1FilterRef',
            'alias': 'V1Alias'
        }

        self.attribute_map = {
            'address': 'address',
            'type': 'type',
            'source': 'source',
            'target': 'target',
            'model': 'model',
            'mac': 'mac',
            'bandwidth': 'bandwidth',
            'boot': 'boot',
            'link': 'link',
            'filter_ref': 'filterRef',
            'alias': 'alias'
        }

        self._address = address
        self._type = type
        self._source = source
        self._target = target
        self._model = model
        self._mac = mac
        self._bandwidth = bandwidth
        self._boot = boot
        self._link = link
        self._filter_ref = filter_ref
        self._alias = alias

    @property
    def address(self):
        """
        Gets the address of this V1Interface.


        :return: The address of this V1Interface.
        :rtype: V1Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this V1Interface.


        :param address: The address of this V1Interface.
        :type: V1Address
        """

        self._address = address

    @property
    def type(self):
        """
        Gets the type of this V1Interface.


        :return: The type of this V1Interface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1Interface.


        :param type: The type of this V1Interface.
        :type: str
        """

        self._type = type

    @property
    def source(self):
        """
        Gets the source of this V1Interface.


        :return: The source of this V1Interface.
        :rtype: V1InterfaceSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this V1Interface.


        :param source: The source of this V1Interface.
        :type: V1InterfaceSource
        """

        self._source = source

    @property
    def target(self):
        """
        Gets the target of this V1Interface.


        :return: The target of this V1Interface.
        :rtype: V1InterfaceTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this V1Interface.


        :param target: The target of this V1Interface.
        :type: V1InterfaceTarget
        """

        self._target = target

    @property
    def model(self):
        """
        Gets the model of this V1Interface.


        :return: The model of this V1Interface.
        :rtype: V1Model
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this V1Interface.


        :param model: The model of this V1Interface.
        :type: V1Model
        """

        self._model = model

    @property
    def mac(self):
        """
        Gets the mac of this V1Interface.


        :return: The mac of this V1Interface.
        :rtype: V1MAC
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """
        Sets the mac of this V1Interface.


        :param mac: The mac of this V1Interface.
        :type: V1MAC
        """

        self._mac = mac

    @property
    def bandwidth(self):
        """
        Gets the bandwidth of this V1Interface.


        :return: The bandwidth of this V1Interface.
        :rtype: V1BandWidth
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """
        Sets the bandwidth of this V1Interface.


        :param bandwidth: The bandwidth of this V1Interface.
        :type: V1BandWidth
        """

        self._bandwidth = bandwidth

    @property
    def boot(self):
        """
        Gets the boot of this V1Interface.


        :return: The boot of this V1Interface.
        :rtype: V1BootOrder
        """
        return self._boot

    @boot.setter
    def boot(self, boot):
        """
        Sets the boot of this V1Interface.


        :param boot: The boot of this V1Interface.
        :type: V1BootOrder
        """

        self._boot = boot

    @property
    def link(self):
        """
        Gets the link of this V1Interface.


        :return: The link of this V1Interface.
        :rtype: V1LinkState
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this V1Interface.


        :param link: The link of this V1Interface.
        :type: V1LinkState
        """

        self._link = link

    @property
    def filter_ref(self):
        """
        Gets the filter_ref of this V1Interface.


        :return: The filter_ref of this V1Interface.
        :rtype: V1FilterRef
        """
        return self._filter_ref

    @filter_ref.setter
    def filter_ref(self, filter_ref):
        """
        Sets the filter_ref of this V1Interface.


        :param filter_ref: The filter_ref of this V1Interface.
        :type: V1FilterRef
        """

        self._filter_ref = filter_ref

    @property
    def alias(self):
        """
        Gets the alias of this V1Interface.


        :return: The alias of this V1Interface.
        :rtype: V1Alias
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this V1Interface.


        :param alias: The alias of this V1Interface.
        :type: V1Alias
        """

        self._alias = alias

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
