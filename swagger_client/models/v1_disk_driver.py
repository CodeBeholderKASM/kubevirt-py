# coding: utf-8

"""


    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version:

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1DiskDriver(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cache=None, error_policy=None, io=None, name=None, type=None):
        """
        V1DiskDriver - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cache': 'str',
            'error_policy': 'str',
            'io': 'str',
            'name': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'cache': 'cache',
            'error_policy': 'errorPolicy',
            'io': 'io',
            'name': 'name',
            'type': 'type'
        }

        self._cache = cache
        self._error_policy = error_policy
        self._io = io
        self._name = name
        self._type = type

    @property
    def cache(self):
        """
        Gets the cache of this V1DiskDriver.


        :return: The cache of this V1DiskDriver.
        :rtype: str
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """
        Sets the cache of this V1DiskDriver.


        :param cache: The cache of this V1DiskDriver.
        :type: str
        """

        self._cache = cache

    @property
    def error_policy(self):
        """
        Gets the error_policy of this V1DiskDriver.


        :return: The error_policy of this V1DiskDriver.
        :rtype: str
        """
        return self._error_policy

    @error_policy.setter
    def error_policy(self, error_policy):
        """
        Sets the error_policy of this V1DiskDriver.


        :param error_policy: The error_policy of this V1DiskDriver.
        :type: str
        """

        self._error_policy = error_policy

    @property
    def io(self):
        """
        Gets the io of this V1DiskDriver.


        :return: The io of this V1DiskDriver.
        :rtype: str
        """
        return self._io

    @io.setter
    def io(self, io):
        """
        Sets the io of this V1DiskDriver.


        :param io: The io of this V1DiskDriver.
        :type: str
        """

        self._io = io

    @property
    def name(self):
        """
        Gets the name of this V1DiskDriver.


        :return: The name of this V1DiskDriver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1DiskDriver.


        :param name: The name of this V1DiskDriver.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this V1DiskDriver.


        :return: The type of this V1DiskDriver.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1DiskDriver.


        :param type: The type of this V1DiskDriver.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
