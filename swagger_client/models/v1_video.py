# coding: utf-8

"""


    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version:

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1Video(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, heads=None, ram=None, v_ram=None, vga_mem=None):
        """
        V1Video - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'heads': 'int',
            'ram': 'int',
            'v_ram': 'int',
            'vga_mem': 'int'
        }

        self.attribute_map = {
            'type': 'type',
            'heads': 'heads',
            'ram': 'ram',
            'v_ram': 'vRam',
            'vga_mem': 'vgaMem'
        }

        self._type = type
        self._heads = heads
        self._ram = ram
        self._v_ram = v_ram
        self._vga_mem = vga_mem

    @property
    def type(self):
        """
        Gets the type of this V1Video.


        :return: The type of this V1Video.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1Video.


        :param type: The type of this V1Video.
        :type: str
        """

        self._type = type

    @property
    def heads(self):
        """
        Gets the heads of this V1Video.


        :return: The heads of this V1Video.
        :rtype: int
        """
        return self._heads

    @heads.setter
    def heads(self, heads):
        """
        Sets the heads of this V1Video.


        :param heads: The heads of this V1Video.
        :type: int
        """

        self._heads = heads

    @property
    def ram(self):
        """
        Gets the ram of this V1Video.


        :return: The ram of this V1Video.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """
        Sets the ram of this V1Video.


        :param ram: The ram of this V1Video.
        :type: int
        """

        self._ram = ram

    @property
    def v_ram(self):
        """
        Gets the v_ram of this V1Video.


        :return: The v_ram of this V1Video.
        :rtype: int
        """
        return self._v_ram

    @v_ram.setter
    def v_ram(self, v_ram):
        """
        Sets the v_ram of this V1Video.


        :param v_ram: The v_ram of this V1Video.
        :type: int
        """

        self._v_ram = v_ram

    @property
    def vga_mem(self):
        """
        Gets the vga_mem of this V1Video.


        :return: The vga_mem of this V1Video.
        :rtype: int
        """
        return self._vga_mem

    @vga_mem.setter
    def vga_mem(self, vga_mem):
        """
        Sets the vga_mem of this V1Video.


        :param vga_mem: The vga_mem of this V1Video.
        :type: int
        """

        self._vga_mem = vga_mem

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
