# coding: utf-8

"""


    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version:

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1CloudInitDataSourceNoCloud(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_data_secret_ref=None, user_data_base64=None, meta_data_base64=None):
        """
        V1CloudInitDataSourceNoCloud - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_data_secret_ref': 'str',
            'user_data_base64': 'str',
            'meta_data_base64': 'str'
        }

        self.attribute_map = {
            'user_data_secret_ref': 'userDataSecretRef',
            'user_data_base64': 'userDataBase64',
            'meta_data_base64': 'metaDataBase64'
        }

        self._user_data_secret_ref = user_data_secret_ref
        self._user_data_base64 = user_data_base64
        self._meta_data_base64 = meta_data_base64

    @property
    def user_data_secret_ref(self):
        """
        Gets the user_data_secret_ref of this V1CloudInitDataSourceNoCloud.
        Reference to a k8s secret that contains NoCloud userdata

        :return: The user_data_secret_ref of this V1CloudInitDataSourceNoCloud.
        :rtype: str
        """
        return self._user_data_secret_ref

    @user_data_secret_ref.setter
    def user_data_secret_ref(self, user_data_secret_ref):
        """
        Sets the user_data_secret_ref of this V1CloudInitDataSourceNoCloud.
        Reference to a k8s secret that contains NoCloud userdata

        :param user_data_secret_ref: The user_data_secret_ref of this V1CloudInitDataSourceNoCloud.
        :type: str
        """

        self._user_data_secret_ref = user_data_secret_ref

    @property
    def user_data_base64(self):
        """
        Gets the user_data_base64 of this V1CloudInitDataSourceNoCloud.
        The NoCloud cloud-init userdata as a base64 encoded string

        :return: The user_data_base64 of this V1CloudInitDataSourceNoCloud.
        :rtype: str
        """
        return self._user_data_base64

    @user_data_base64.setter
    def user_data_base64(self, user_data_base64):
        """
        Sets the user_data_base64 of this V1CloudInitDataSourceNoCloud.
        The NoCloud cloud-init userdata as a base64 encoded string

        :param user_data_base64: The user_data_base64 of this V1CloudInitDataSourceNoCloud.
        :type: str
        """

        self._user_data_base64 = user_data_base64

    @property
    def meta_data_base64(self):
        """
        Gets the meta_data_base64 of this V1CloudInitDataSourceNoCloud.
        The NoCloud cloud-init metadata as a base64 encoded string

        :return: The meta_data_base64 of this V1CloudInitDataSourceNoCloud.
        :rtype: str
        """
        return self._meta_data_base64

    @meta_data_base64.setter
    def meta_data_base64(self, meta_data_base64):
        """
        Sets the meta_data_base64 of this V1CloudInitDataSourceNoCloud.
        The NoCloud cloud-init metadata as a base64 encoded string

        :param meta_data_base64: The meta_data_base64 of this V1CloudInitDataSourceNoCloud.
        :type: str
        """

        self._meta_data_base64 = meta_data_base64

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
