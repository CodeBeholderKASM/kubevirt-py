# coding: utf-8

"""


    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version:

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1OS(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, sm_bios=None, boot_order=None, boot_menu=None, bios=None):
        """
        V1OS - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'V1OSType',
            'sm_bios': 'V1SMBios',
            'boot_order': 'list[V1Boot]',
            'boot_menu': 'V1BootMenu',
            'bios': 'V1BIOS'
        }

        self.attribute_map = {
            'type': 'type',
            'sm_bios': 'smBIOS',
            'boot_order': 'bootOrder',
            'boot_menu': 'bootMenu',
            'bios': 'bios'
        }

        self._type = type
        self._sm_bios = sm_bios
        self._boot_order = boot_order
        self._boot_menu = boot_menu
        self._bios = bios

    @property
    def type(self):
        """
        Gets the type of this V1OS.


        :return: The type of this V1OS.
        :rtype: V1OSType
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1OS.


        :param type: The type of this V1OS.
        :type: V1OSType
        """

        self._type = type

    @property
    def sm_bios(self):
        """
        Gets the sm_bios of this V1OS.


        :return: The sm_bios of this V1OS.
        :rtype: V1SMBios
        """
        return self._sm_bios

    @sm_bios.setter
    def sm_bios(self, sm_bios):
        """
        Sets the sm_bios of this V1OS.


        :param sm_bios: The sm_bios of this V1OS.
        :type: V1SMBios
        """

        self._sm_bios = sm_bios

    @property
    def boot_order(self):
        """
        Gets the boot_order of this V1OS.


        :return: The boot_order of this V1OS.
        :rtype: list[V1Boot]
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """
        Sets the boot_order of this V1OS.


        :param boot_order: The boot_order of this V1OS.
        :type: list[V1Boot]
        """

        self._boot_order = boot_order

    @property
    def boot_menu(self):
        """
        Gets the boot_menu of this V1OS.


        :return: The boot_menu of this V1OS.
        :rtype: V1BootMenu
        """
        return self._boot_menu

    @boot_menu.setter
    def boot_menu(self, boot_menu):
        """
        Sets the boot_menu of this V1OS.


        :param boot_menu: The boot_menu of this V1OS.
        :type: V1BootMenu
        """

        self._boot_menu = boot_menu

    @property
    def bios(self):
        """
        Gets the bios of this V1OS.


        :return: The bios of this V1OS.
        :rtype: V1BIOS
        """
        return self._bios

    @bios.setter
    def bios(self, bios):
        """
        Sets the bios of this V1OS.


        :param bios: The bios of this V1OS.
        :type: V1BIOS
        """

        self._bios = bios

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
