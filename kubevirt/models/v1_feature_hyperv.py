# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1FeatureHyperv(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'relaxed': 'V1FeatureState',
        'reset': 'V1FeatureState',
        'runtime': 'V1FeatureState',
        'spinlocks': 'V1FeatureSpinlocks',
        'synic': 'V1FeatureState',
        'synictimer': 'V1FeatureState',
        'vapic': 'V1FeatureState',
        'vendorid': 'V1FeatureVendorID',
        'vpindex': 'V1FeatureState'
    }

    attribute_map = {
        'relaxed': 'relaxed',
        'reset': 'reset',
        'runtime': 'runtime',
        'spinlocks': 'spinlocks',
        'synic': 'synic',
        'synictimer': 'synictimer',
        'vapic': 'vapic',
        'vendorid': 'vendorid',
        'vpindex': 'vpindex'
    }

    def __init__(self, relaxed=None, reset=None, runtime=None, spinlocks=None, synic=None, synictimer=None, vapic=None, vendorid=None, vpindex=None):
        """
        V1FeatureHyperv - a model defined in Swagger
        """

        self._relaxed = None
        self._reset = None
        self._runtime = None
        self._spinlocks = None
        self._synic = None
        self._synictimer = None
        self._vapic = None
        self._vendorid = None
        self._vpindex = None

        if relaxed is not None:
          self.relaxed = relaxed
        if reset is not None:
          self.reset = reset
        if runtime is not None:
          self.runtime = runtime
        if spinlocks is not None:
          self.spinlocks = spinlocks
        if synic is not None:
          self.synic = synic
        if synictimer is not None:
          self.synictimer = synictimer
        if vapic is not None:
          self.vapic = vapic
        if vendorid is not None:
          self.vendorid = vendorid
        if vpindex is not None:
          self.vpindex = vpindex

    @property
    def relaxed(self):
        """
        Gets the relaxed of this V1FeatureHyperv.
        Relaxed relaxes constraints on timer. Defaults to the machine type setting. +optional

        :return: The relaxed of this V1FeatureHyperv.
        :rtype: V1FeatureState
        """
        return self._relaxed

    @relaxed.setter
    def relaxed(self, relaxed):
        """
        Sets the relaxed of this V1FeatureHyperv.
        Relaxed relaxes constraints on timer. Defaults to the machine type setting. +optional

        :param relaxed: The relaxed of this V1FeatureHyperv.
        :type: V1FeatureState
        """

        self._relaxed = relaxed

    @property
    def reset(self):
        """
        Gets the reset of this V1FeatureHyperv.
        Reset enables Hyperv reboot/reset for the vmi. Defaults to the machine type setting. +optional

        :return: The reset of this V1FeatureHyperv.
        :rtype: V1FeatureState
        """
        return self._reset

    @reset.setter
    def reset(self, reset):
        """
        Sets the reset of this V1FeatureHyperv.
        Reset enables Hyperv reboot/reset for the vmi. Defaults to the machine type setting. +optional

        :param reset: The reset of this V1FeatureHyperv.
        :type: V1FeatureState
        """

        self._reset = reset

    @property
    def runtime(self):
        """
        Gets the runtime of this V1FeatureHyperv.
        Runtime. Defaults to the machine type setting. +optional

        :return: The runtime of this V1FeatureHyperv.
        :rtype: V1FeatureState
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """
        Sets the runtime of this V1FeatureHyperv.
        Runtime. Defaults to the machine type setting. +optional

        :param runtime: The runtime of this V1FeatureHyperv.
        :type: V1FeatureState
        """

        self._runtime = runtime

    @property
    def spinlocks(self):
        """
        Gets the spinlocks of this V1FeatureHyperv.
        Spinlocks indicates if spinlocks should be made available to the guest. +optional

        :return: The spinlocks of this V1FeatureHyperv.
        :rtype: V1FeatureSpinlocks
        """
        return self._spinlocks

    @spinlocks.setter
    def spinlocks(self, spinlocks):
        """
        Sets the spinlocks of this V1FeatureHyperv.
        Spinlocks indicates if spinlocks should be made available to the guest. +optional

        :param spinlocks: The spinlocks of this V1FeatureHyperv.
        :type: V1FeatureSpinlocks
        """

        self._spinlocks = spinlocks

    @property
    def synic(self):
        """
        Gets the synic of this V1FeatureHyperv.
        SyNIC enable Synthetic Interrupt Controller. Defaults to the machine type setting. +optional

        :return: The synic of this V1FeatureHyperv.
        :rtype: V1FeatureState
        """
        return self._synic

    @synic.setter
    def synic(self, synic):
        """
        Sets the synic of this V1FeatureHyperv.
        SyNIC enable Synthetic Interrupt Controller. Defaults to the machine type setting. +optional

        :param synic: The synic of this V1FeatureHyperv.
        :type: V1FeatureState
        """

        self._synic = synic

    @property
    def synictimer(self):
        """
        Gets the synictimer of this V1FeatureHyperv.
        SyNICTimer enable Synthetic Interrupt Controller timer. Defaults to the machine type setting. +optional

        :return: The synictimer of this V1FeatureHyperv.
        :rtype: V1FeatureState
        """
        return self._synictimer

    @synictimer.setter
    def synictimer(self, synictimer):
        """
        Sets the synictimer of this V1FeatureHyperv.
        SyNICTimer enable Synthetic Interrupt Controller timer. Defaults to the machine type setting. +optional

        :param synictimer: The synictimer of this V1FeatureHyperv.
        :type: V1FeatureState
        """

        self._synictimer = synictimer

    @property
    def vapic(self):
        """
        Gets the vapic of this V1FeatureHyperv.
        VAPIC indicates whether virtual APIC is enabled. Defaults to the machine type setting. +optional

        :return: The vapic of this V1FeatureHyperv.
        :rtype: V1FeatureState
        """
        return self._vapic

    @vapic.setter
    def vapic(self, vapic):
        """
        Sets the vapic of this V1FeatureHyperv.
        VAPIC indicates whether virtual APIC is enabled. Defaults to the machine type setting. +optional

        :param vapic: The vapic of this V1FeatureHyperv.
        :type: V1FeatureState
        """

        self._vapic = vapic

    @property
    def vendorid(self):
        """
        Gets the vendorid of this V1FeatureHyperv.
        VendorID allows setting the hypervisor vendor id. Defaults to the machine type setting. +optional

        :return: The vendorid of this V1FeatureHyperv.
        :rtype: V1FeatureVendorID
        """
        return self._vendorid

    @vendorid.setter
    def vendorid(self, vendorid):
        """
        Sets the vendorid of this V1FeatureHyperv.
        VendorID allows setting the hypervisor vendor id. Defaults to the machine type setting. +optional

        :param vendorid: The vendorid of this V1FeatureHyperv.
        :type: V1FeatureVendorID
        """

        self._vendorid = vendorid

    @property
    def vpindex(self):
        """
        Gets the vpindex of this V1FeatureHyperv.
        VPIndex enables the Virtual Processor Index to help windows identifying virtual processors. Defaults to the machine type setting. +optional

        :return: The vpindex of this V1FeatureHyperv.
        :rtype: V1FeatureState
        """
        return self._vpindex

    @vpindex.setter
    def vpindex(self, vpindex):
        """
        Sets the vpindex of this V1FeatureHyperv.
        VPIndex enables the Virtual Processor Index to help windows identifying virtual processors. Defaults to the machine type setting. +optional

        :param vpindex: The vpindex of this V1FeatureHyperv.
        :type: V1FeatureState
        """

        self._vpindex = vpindex

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1FeatureHyperv):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
