# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1LiveUpdateFeatures(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affinity': 'V1LiveUpdateAffinity',
        'cpu': 'V1LiveUpdateCPU',
        'memory': 'V1LiveUpdateMemory'
    }

    attribute_map = {
        'affinity': 'affinity',
        'cpu': 'cpu',
        'memory': 'memory'
    }

    def __init__(self, affinity=None, cpu=None, memory=None):
        """
        V1LiveUpdateFeatures - a model defined in Swagger
        """

        self._affinity = None
        self._cpu = None
        self._memory = None

        if affinity is not None:
          self.affinity = affinity
        if cpu is not None:
          self.cpu = cpu
        if memory is not None:
          self.memory = memory

    @property
    def affinity(self):
        """
        Gets the affinity of this V1LiveUpdateFeatures.
        Affinity allows live updating the virtual machines node affinity

        :return: The affinity of this V1LiveUpdateFeatures.
        :rtype: V1LiveUpdateAffinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """
        Sets the affinity of this V1LiveUpdateFeatures.
        Affinity allows live updating the virtual machines node affinity

        :param affinity: The affinity of this V1LiveUpdateFeatures.
        :type: V1LiveUpdateAffinity
        """

        self._affinity = affinity

    @property
    def cpu(self):
        """
        Gets the cpu of this V1LiveUpdateFeatures.
        LiveUpdateCPU holds hotplug configuration for the CPU resource. Empty struct indicates that default will be used for maxSockets. Default is specified on cluster level. Absence of the struct means opt-out from CPU hotplug functionality.

        :return: The cpu of this V1LiveUpdateFeatures.
        :rtype: V1LiveUpdateCPU
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this V1LiveUpdateFeatures.
        LiveUpdateCPU holds hotplug configuration for the CPU resource. Empty struct indicates that default will be used for maxSockets. Default is specified on cluster level. Absence of the struct means opt-out from CPU hotplug functionality.

        :param cpu: The cpu of this V1LiveUpdateFeatures.
        :type: V1LiveUpdateCPU
        """

        self._cpu = cpu

    @property
    def memory(self):
        """
        Gets the memory of this V1LiveUpdateFeatures.
        MemoryLiveUpdateConfiguration defines the live update memory features for the VirtualMachine

        :return: The memory of this V1LiveUpdateFeatures.
        :rtype: V1LiveUpdateMemory
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this V1LiveUpdateFeatures.
        MemoryLiveUpdateConfiguration defines the live update memory features for the VirtualMachine

        :param memory: The memory of this V1LiveUpdateFeatures.
        :type: V1LiveUpdateMemory
        """

        self._memory = memory

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1LiveUpdateFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
