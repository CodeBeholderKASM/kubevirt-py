# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1GPU(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_name': 'str',
        'name': 'str',
        'tag': 'str',
        'virtual_gpu_options': 'V1VGPUOptions'
    }

    attribute_map = {
        'device_name': 'deviceName',
        'name': 'name',
        'tag': 'tag',
        'virtual_gpu_options': 'virtualGPUOptions'
    }

    def __init__(self, device_name='', name='', tag=None, virtual_gpu_options=None):
        """
        V1GPU - a model defined in Swagger
        """

        self._device_name = None
        self._name = None
        self._tag = None
        self._virtual_gpu_options = None

        self.device_name = device_name
        self.name = name
        if tag is not None:
          self.tag = tag
        if virtual_gpu_options is not None:
          self.virtual_gpu_options = virtual_gpu_options

    @property
    def device_name(self):
        """
        Gets the device_name of this V1GPU.

        :return: The device_name of this V1GPU.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """
        Sets the device_name of this V1GPU.

        :param device_name: The device_name of this V1GPU.
        :type: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")

        self._device_name = device_name

    @property
    def name(self):
        """
        Gets the name of this V1GPU.
        Name of the GPU device as exposed by a device plugin

        :return: The name of this V1GPU.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1GPU.
        Name of the GPU device as exposed by a device plugin

        :param name: The name of this V1GPU.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def tag(self):
        """
        Gets the tag of this V1GPU.
        If specified, the virtual network interface address and its tag will be provided to the guest via config drive

        :return: The tag of this V1GPU.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this V1GPU.
        If specified, the virtual network interface address and its tag will be provided to the guest via config drive

        :param tag: The tag of this V1GPU.
        :type: str
        """

        self._tag = tag

    @property
    def virtual_gpu_options(self):
        """
        Gets the virtual_gpu_options of this V1GPU.

        :return: The virtual_gpu_options of this V1GPU.
        :rtype: V1VGPUOptions
        """
        return self._virtual_gpu_options

    @virtual_gpu_options.setter
    def virtual_gpu_options(self, virtual_gpu_options):
        """
        Sets the virtual_gpu_options of this V1GPU.

        :param virtual_gpu_options: The virtual_gpu_options of this V1GPU.
        :type: V1VGPUOptions
        """

        self._virtual_gpu_options = virtual_gpu_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1GPU):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
