# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1HotplugVolumeStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attach_pod_name': 'str',
        'attach_pod_uid': 'str'
    }

    attribute_map = {
        'attach_pod_name': 'attachPodName',
        'attach_pod_uid': 'attachPodUID'
    }

    def __init__(self, attach_pod_name=None, attach_pod_uid=None):
        """
        V1HotplugVolumeStatus - a model defined in Swagger
        """

        self._attach_pod_name = None
        self._attach_pod_uid = None

        if attach_pod_name is not None:
          self.attach_pod_name = attach_pod_name
        if attach_pod_uid is not None:
          self.attach_pod_uid = attach_pod_uid

    @property
    def attach_pod_name(self):
        """
        Gets the attach_pod_name of this V1HotplugVolumeStatus.
        AttachPodName is the name of the pod used to attach the volume to the node.

        :return: The attach_pod_name of this V1HotplugVolumeStatus.
        :rtype: str
        """
        return self._attach_pod_name

    @attach_pod_name.setter
    def attach_pod_name(self, attach_pod_name):
        """
        Sets the attach_pod_name of this V1HotplugVolumeStatus.
        AttachPodName is the name of the pod used to attach the volume to the node.

        :param attach_pod_name: The attach_pod_name of this V1HotplugVolumeStatus.
        :type: str
        """

        self._attach_pod_name = attach_pod_name

    @property
    def attach_pod_uid(self):
        """
        Gets the attach_pod_uid of this V1HotplugVolumeStatus.
        AttachPodUID is the UID of the pod used to attach the volume to the node.

        :return: The attach_pod_uid of this V1HotplugVolumeStatus.
        :rtype: str
        """
        return self._attach_pod_uid

    @attach_pod_uid.setter
    def attach_pod_uid(self, attach_pod_uid):
        """
        Sets the attach_pod_uid of this V1HotplugVolumeStatus.
        AttachPodUID is the UID of the pod used to attach the volume to the node.

        :param attach_pod_uid: The attach_pod_uid of this V1HotplugVolumeStatus.
        :type: str
        """

        self._attach_pod_uid = attach_pod_uid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1HotplugVolumeStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
