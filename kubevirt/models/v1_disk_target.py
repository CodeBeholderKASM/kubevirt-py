# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1DiskTarget(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dev': 'str',
        'readonly': 'bool'
    }

    attribute_map = {
        'dev': 'dev',
        'readonly': 'readonly'
    }

    def __init__(self, dev=None, readonly=None):
        """
        V1DiskTarget - a model defined in Swagger
        """

        self._dev = None
        self._readonly = None

        if dev is not None:
          self.dev = dev
        if readonly is not None:
          self.readonly = readonly

    @property
    def dev(self):
        """
        Gets the dev of this V1DiskTarget.
        Device indicates the \"logical\" device name. The actual device name specified is not guaranteed to map to the device name in the guest OS. Treat it as a device ordering hint.

        :return: The dev of this V1DiskTarget.
        :rtype: str
        """
        return self._dev

    @dev.setter
    def dev(self, dev):
        """
        Sets the dev of this V1DiskTarget.
        Device indicates the \"logical\" device name. The actual device name specified is not guaranteed to map to the device name in the guest OS. Treat it as a device ordering hint.

        :param dev: The dev of this V1DiskTarget.
        :type: str
        """

        self._dev = dev

    @property
    def readonly(self):
        """
        Gets the readonly of this V1DiskTarget.
        ReadOnly Defaults to false

        :return: The readonly of this V1DiskTarget.
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """
        Sets the readonly of this V1DiskTarget.
        ReadOnly Defaults to false

        :param readonly: The readonly of this V1DiskTarget.
        :type: bool
        """

        self._readonly = readonly

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1DiskTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
