# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1Interface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bridge': 'V1InterfaceBridge',
        'mac_address': 'str',
        'model': 'str',
        'name': 'str',
        'slirp': 'V1InterfaceSlirp'
    }

    attribute_map = {
        'bridge': 'bridge',
        'mac_address': 'macAddress',
        'model': 'model',
        'name': 'name',
        'slirp': 'slirp'
    }

    def __init__(self, bridge=None, mac_address=None, model=None, name=None, slirp=None):
        """
        V1Interface - a model defined in Swagger
        """

        self._bridge = None
        self._mac_address = None
        self._model = None
        self._name = None
        self._slirp = None

        if bridge is not None:
          self.bridge = bridge
        if mac_address is not None:
          self.mac_address = mac_address
        if model is not None:
          self.model = model
        self.name = name
        if slirp is not None:
          self.slirp = slirp

    @property
    def bridge(self):
        """
        Gets the bridge of this V1Interface.

        :return: The bridge of this V1Interface.
        :rtype: V1InterfaceBridge
        """
        return self._bridge

    @bridge.setter
    def bridge(self, bridge):
        """
        Sets the bridge of this V1Interface.

        :param bridge: The bridge of this V1Interface.
        :type: V1InterfaceBridge
        """

        self._bridge = bridge

    @property
    def mac_address(self):
        """
        Gets the mac_address of this V1Interface.
        Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.

        :return: The mac_address of this V1Interface.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this V1Interface.
        Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.

        :param mac_address: The mac_address of this V1Interface.
        :type: str
        """

        self._mac_address = mac_address

    @property
    def model(self):
        """
        Gets the model of this V1Interface.
        Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio.

        :return: The model of this V1Interface.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this V1Interface.
        Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio.

        :param model: The model of this V1Interface.
        :type: str
        """

        self._model = model

    @property
    def name(self):
        """
        Gets the name of this V1Interface.
        Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network.

        :return: The name of this V1Interface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1Interface.
        Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network.

        :param name: The name of this V1Interface.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def slirp(self):
        """
        Gets the slirp of this V1Interface.

        :return: The slirp of this V1Interface.
        :rtype: V1InterfaceSlirp
        """
        return self._slirp

    @slirp.setter
    def slirp(self, slirp):
        """
        Sets the slirp of this V1Interface.

        :param slirp: The slirp of this V1Interface.
        :type: V1InterfaceSlirp
        """

        self._slirp = slirp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1Interface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
