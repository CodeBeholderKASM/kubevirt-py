# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResourceQuantity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'str',
        'd': 'ResourceInfDecAmount',
        'i': 'ResourceInt64Amount',
        's': 'str'
    }

    attribute_map = {
        'format': 'Format',
        'd': 'd',
        'i': 'i',
        's': 's'
    }

    def __init__(self, format=None, d=None, i=None, s=None):
        """
        ResourceQuantity - a model defined in Swagger
        """

        self._format = None
        self._d = None
        self._i = None
        self._s = None

        self.format = format
        self.d = d
        self.i = i
        self.s = s

    @property
    def format(self):
        """
        Gets the format of this ResourceQuantity.

        :return: The format of this ResourceQuantity.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this ResourceQuantity.

        :param format: The format of this ResourceQuantity.
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def d(self):
        """
        Gets the d of this ResourceQuantity.

        :return: The d of this ResourceQuantity.
        :rtype: ResourceInfDecAmount
        """
        return self._d

    @d.setter
    def d(self, d):
        """
        Sets the d of this ResourceQuantity.

        :param d: The d of this ResourceQuantity.
        :type: ResourceInfDecAmount
        """
        if d is None:
            raise ValueError("Invalid value for `d`, must not be `None`")

        self._d = d

    @property
    def i(self):
        """
        Gets the i of this ResourceQuantity.

        :return: The i of this ResourceQuantity.
        :rtype: ResourceInt64Amount
        """
        return self._i

    @i.setter
    def i(self, i):
        """
        Sets the i of this ResourceQuantity.

        :param i: The i of this ResourceQuantity.
        :type: ResourceInt64Amount
        """
        if i is None:
            raise ValueError("Invalid value for `i`, must not be `None`")

        self._i = i

    @property
    def s(self):
        """
        Gets the s of this ResourceQuantity.

        :return: The s of this ResourceQuantity.
        :rtype: str
        """
        return self._s

    @s.setter
    def s(self, s):
        """
        Sets the s of this ResourceQuantity.

        :param s: The s of this ResourceQuantity.
        :type: str
        """
        if s is None:
            raise ValueError("Invalid value for `s`, must not be `None`")

        self._s = s

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResourceQuantity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
