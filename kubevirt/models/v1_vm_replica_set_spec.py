# coding: utf-8

"""
    KubeVirt API,

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1VMReplicaSetSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'paused': 'bool',
        'replicas': 'int',
        'selector': 'V1LabelSelector',
        'template': 'V1VMTemplateSpec'
    }

    attribute_map = {
        'paused': 'paused',
        'replicas': 'replicas',
        'selector': 'selector',
        'template': 'template'
    }

    def __init__(self, paused=None, replicas=None, selector=None, template=None):
        """
        V1VMReplicaSetSpec - a model defined in Swagger
        """

        self._paused = None
        self._replicas = None
        self._selector = None
        self._template = None

        if paused is not None:
          self.paused = paused
        if replicas is not None:
          self.replicas = replicas
        if selector is not None:
          self.selector = selector
        self.template = template

    @property
    def paused(self):
        """
        Gets the paused of this V1VMReplicaSetSpec.
        Indicates that the replica set is paused. +optional

        :return: The paused of this V1VMReplicaSetSpec.
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """
        Sets the paused of this V1VMReplicaSetSpec.
        Indicates that the replica set is paused. +optional

        :param paused: The paused of this V1VMReplicaSetSpec.
        :type: bool
        """

        self._paused = paused

    @property
    def replicas(self):
        """
        Gets the replicas of this V1VMReplicaSetSpec.
        Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. +optional

        :return: The replicas of this V1VMReplicaSetSpec.
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """
        Sets the replicas of this V1VMReplicaSetSpec.
        Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. +optional

        :param replicas: The replicas of this V1VMReplicaSetSpec.
        :type: int
        """

        self._replicas = replicas

    @property
    def selector(self):
        """
        Gets the selector of this V1VMReplicaSetSpec.
        Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. +optional

        :return: The selector of this V1VMReplicaSetSpec.
        :rtype: V1LabelSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """
        Sets the selector of this V1VMReplicaSetSpec.
        Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. +optional

        :param selector: The selector of this V1VMReplicaSetSpec.
        :type: V1LabelSelector
        """

        self._selector = selector

    @property
    def template(self):
        """
        Gets the template of this V1VMReplicaSetSpec.
        Template describes the pods that will be created.

        :return: The template of this V1VMReplicaSetSpec.
        :rtype: V1VMTemplateSpec
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this V1VMReplicaSetSpec.
        Template describes the pods that will be created.

        :param template: The template of this V1VMReplicaSetSpec.
        :type: V1VMTemplateSpec
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1VMReplicaSetSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
