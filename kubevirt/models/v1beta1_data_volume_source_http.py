# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1DataVolumeSourceHTTP(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_config_map': 'str',
        'secret_ref': 'str',
        'url': 'str'
    }

    attribute_map = {
        'cert_config_map': 'certConfigMap',
        'secret_ref': 'secretRef',
        'url': 'url'
    }

    def __init__(self, cert_config_map=None, secret_ref=None, url=None):
        """
        V1beta1DataVolumeSourceHTTP - a model defined in Swagger
        """

        self._cert_config_map = None
        self._secret_ref = None
        self._url = None

        if cert_config_map is not None:
          self.cert_config_map = cert_config_map
        if secret_ref is not None:
          self.secret_ref = secret_ref
        self.url = url

    @property
    def cert_config_map(self):
        """
        Gets the cert_config_map of this V1beta1DataVolumeSourceHTTP.
        CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate

        :return: The cert_config_map of this V1beta1DataVolumeSourceHTTP.
        :rtype: str
        """
        return self._cert_config_map

    @cert_config_map.setter
    def cert_config_map(self, cert_config_map):
        """
        Sets the cert_config_map of this V1beta1DataVolumeSourceHTTP.
        CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate

        :param cert_config_map: The cert_config_map of this V1beta1DataVolumeSourceHTTP.
        :type: str
        """

        self._cert_config_map = cert_config_map

    @property
    def secret_ref(self):
        """
        Gets the secret_ref of this V1beta1DataVolumeSourceHTTP.
        SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded

        :return: The secret_ref of this V1beta1DataVolumeSourceHTTP.
        :rtype: str
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref):
        """
        Sets the secret_ref of this V1beta1DataVolumeSourceHTTP.
        SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded

        :param secret_ref: The secret_ref of this V1beta1DataVolumeSourceHTTP.
        :type: str
        """

        self._secret_ref = secret_ref

    @property
    def url(self):
        """
        Gets the url of this V1beta1DataVolumeSourceHTTP.
        URL is the URL of the http(s) endpoint

        :return: The url of this V1beta1DataVolumeSourceHTTP.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this V1beta1DataVolumeSourceHTTP.
        URL is the URL of the http(s) endpoint

        :param url: The url of this V1beta1DataVolumeSourceHTTP.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1DataVolumeSourceHTTP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
