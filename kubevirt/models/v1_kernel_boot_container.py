# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1KernelBootContainer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image': 'str',
        'image_pull_policy': 'str',
        'image_pull_secret': 'str',
        'initrd_path': 'str',
        'kernel_path': 'str'
    }

    attribute_map = {
        'image': 'image',
        'image_pull_policy': 'imagePullPolicy',
        'image_pull_secret': 'imagePullSecret',
        'initrd_path': 'initrdPath',
        'kernel_path': 'kernelPath'
    }

    def __init__(self, image=None, image_pull_policy=None, image_pull_secret=None, initrd_path=None, kernel_path=None):
        """
        V1KernelBootContainer - a model defined in Swagger
        """

        self._image = None
        self._image_pull_policy = None
        self._image_pull_secret = None
        self._initrd_path = None
        self._kernel_path = None

        self.image = image
        if image_pull_policy is not None:
          self.image_pull_policy = image_pull_policy
        if image_pull_secret is not None:
          self.image_pull_secret = image_pull_secret
        if initrd_path is not None:
          self.initrd_path = initrd_path
        if kernel_path is not None:
          self.kernel_path = kernel_path

    @property
    def image(self):
        """
        Gets the image of this V1KernelBootContainer.
        Image that contains initrd / kernel files.

        :return: The image of this V1KernelBootContainer.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this V1KernelBootContainer.
        Image that contains initrd / kernel files.

        :param image: The image of this V1KernelBootContainer.
        :type: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def image_pull_policy(self):
        """
        Gets the image_pull_policy of this V1KernelBootContainer.
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

        :return: The image_pull_policy of this V1KernelBootContainer.
        :rtype: str
        """
        return self._image_pull_policy

    @image_pull_policy.setter
    def image_pull_policy(self, image_pull_policy):
        """
        Sets the image_pull_policy of this V1KernelBootContainer.
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

        :param image_pull_policy: The image_pull_policy of this V1KernelBootContainer.
        :type: str
        """

        self._image_pull_policy = image_pull_policy

    @property
    def image_pull_secret(self):
        """
        Gets the image_pull_secret of this V1KernelBootContainer.
        ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.

        :return: The image_pull_secret of this V1KernelBootContainer.
        :rtype: str
        """
        return self._image_pull_secret

    @image_pull_secret.setter
    def image_pull_secret(self, image_pull_secret):
        """
        Sets the image_pull_secret of this V1KernelBootContainer.
        ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.

        :param image_pull_secret: The image_pull_secret of this V1KernelBootContainer.
        :type: str
        """

        self._image_pull_secret = image_pull_secret

    @property
    def initrd_path(self):
        """
        Gets the initrd_path of this V1KernelBootContainer.
        the fully-qualified path to the ramdisk image in the host OS

        :return: The initrd_path of this V1KernelBootContainer.
        :rtype: str
        """
        return self._initrd_path

    @initrd_path.setter
    def initrd_path(self, initrd_path):
        """
        Sets the initrd_path of this V1KernelBootContainer.
        the fully-qualified path to the ramdisk image in the host OS

        :param initrd_path: The initrd_path of this V1KernelBootContainer.
        :type: str
        """

        self._initrd_path = initrd_path

    @property
    def kernel_path(self):
        """
        Gets the kernel_path of this V1KernelBootContainer.
        The fully-qualified path to the kernel image in the host OS

        :return: The kernel_path of this V1KernelBootContainer.
        :rtype: str
        """
        return self._kernel_path

    @kernel_path.setter
    def kernel_path(self, kernel_path):
        """
        Sets the kernel_path of this V1KernelBootContainer.
        The fully-qualified path to the kernel image in the host OS

        :param kernel_path: The kernel_path of this V1KernelBootContainer.
        :type: str
        """

        self._kernel_path = kernel_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1KernelBootContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
