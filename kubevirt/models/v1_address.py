# coding: utf-8

"""
    KubeVirt API, 

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1Address(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bus': 'str',
        'domain': 'str',
        'function': 'str',
        'slot': 'str',
        'type': 'str'
    }

    attribute_map = {
        'bus': 'bus',
        'domain': 'domain',
        'function': 'function',
        'slot': 'slot',
        'type': 'type'
    }

    def __init__(self, bus=None, domain=None, function=None, slot=None, type=None):
        """
        V1Address - a model defined in Swagger
        """

        self._bus = None
        self._domain = None
        self._function = None
        self._slot = None
        self._type = None

        self.bus = bus
        self.domain = domain
        self.function = function
        self.slot = slot
        self.type = type

    @property
    def bus(self):
        """
        Gets the bus of this V1Address.

        :return: The bus of this V1Address.
        :rtype: str
        """
        return self._bus

    @bus.setter
    def bus(self, bus):
        """
        Sets the bus of this V1Address.

        :param bus: The bus of this V1Address.
        :type: str
        """
        if bus is None:
            raise ValueError("Invalid value for `bus`, must not be `None`")

        self._bus = bus

    @property
    def domain(self):
        """
        Gets the domain of this V1Address.

        :return: The domain of this V1Address.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this V1Address.

        :param domain: The domain of this V1Address.
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def function(self):
        """
        Gets the function of this V1Address.

        :return: The function of this V1Address.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """
        Sets the function of this V1Address.

        :param function: The function of this V1Address.
        :type: str
        """
        if function is None:
            raise ValueError("Invalid value for `function`, must not be `None`")

        self._function = function

    @property
    def slot(self):
        """
        Gets the slot of this V1Address.

        :return: The slot of this V1Address.
        :rtype: str
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """
        Sets the slot of this V1Address.

        :param slot: The slot of this V1Address.
        :type: str
        """
        if slot is None:
            raise ValueError("Invalid value for `slot`, must not be `None`")

        self._slot = slot

    @property
    def type(self):
        """
        Gets the type of this V1Address.

        :return: The type of this V1Address.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1Address.

        :param type: The type of this V1Address.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
