# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1CloudInitDataSourceNoCloud(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meta_data_base64': 'str',
        'user_data_base64': 'str',
        'user_data_secret_ref': 'str'
    }

    attribute_map = {
        'meta_data_base64': 'metaDataBase64',
        'user_data_base64': 'userDataBase64',
        'user_data_secret_ref': 'userDataSecretRef'
    }

    def __init__(self, meta_data_base64=None, user_data_base64=None, user_data_secret_ref=None):
        """
        V1CloudInitDataSourceNoCloud - a model defined in Swagger
        """

        self._meta_data_base64 = None
        self._user_data_base64 = None
        self._user_data_secret_ref = None

        if meta_data_base64 is not None:
          self.meta_data_base64 = meta_data_base64
        self.user_data_base64 = user_data_base64
        if user_data_secret_ref is not None:
          self.user_data_secret_ref = user_data_secret_ref

    @property
    def meta_data_base64(self):
        """
        Gets the meta_data_base64 of this V1CloudInitDataSourceNoCloud.
        The NoCloud cloud-init metadata as a base64 encoded string

        :return: The meta_data_base64 of this V1CloudInitDataSourceNoCloud.
        :rtype: str
        """
        return self._meta_data_base64

    @meta_data_base64.setter
    def meta_data_base64(self, meta_data_base64):
        """
        Sets the meta_data_base64 of this V1CloudInitDataSourceNoCloud.
        The NoCloud cloud-init metadata as a base64 encoded string

        :param meta_data_base64: The meta_data_base64 of this V1CloudInitDataSourceNoCloud.
        :type: str
        """

        self._meta_data_base64 = meta_data_base64

    @property
    def user_data_base64(self):
        """
        Gets the user_data_base64 of this V1CloudInitDataSourceNoCloud.
        The NoCloud cloud-init userdata as a base64 encoded string

        :return: The user_data_base64 of this V1CloudInitDataSourceNoCloud.
        :rtype: str
        """
        return self._user_data_base64

    @user_data_base64.setter
    def user_data_base64(self, user_data_base64):
        """
        Sets the user_data_base64 of this V1CloudInitDataSourceNoCloud.
        The NoCloud cloud-init userdata as a base64 encoded string

        :param user_data_base64: The user_data_base64 of this V1CloudInitDataSourceNoCloud.
        :type: str
        """
        if user_data_base64 is None:
            raise ValueError("Invalid value for `user_data_base64`, must not be `None`")

        self._user_data_base64 = user_data_base64

    @property
    def user_data_secret_ref(self):
        """
        Gets the user_data_secret_ref of this V1CloudInitDataSourceNoCloud.
        Reference to a k8s secret that contains NoCloud userdata

        :return: The user_data_secret_ref of this V1CloudInitDataSourceNoCloud.
        :rtype: str
        """
        return self._user_data_secret_ref

    @user_data_secret_ref.setter
    def user_data_secret_ref(self, user_data_secret_ref):
        """
        Sets the user_data_secret_ref of this V1CloudInitDataSourceNoCloud.
        Reference to a k8s secret that contains NoCloud userdata

        :param user_data_secret_ref: The user_data_secret_ref of this V1CloudInitDataSourceNoCloud.
        :type: str
        """

        self._user_data_secret_ref = user_data_secret_ref

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1CloudInitDataSourceNoCloud):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
