# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1DHCPOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_file_name': 'str',
        'tftp_server_name': 'str'
    }

    attribute_map = {
        'boot_file_name': 'bootFileName',
        'tftp_server_name': 'tftpServerName'
    }

    def __init__(self, boot_file_name=None, tftp_server_name=None):
        """
        V1DHCPOptions - a model defined in Swagger
        """

        self._boot_file_name = None
        self._tftp_server_name = None

        if boot_file_name is not None:
          self.boot_file_name = boot_file_name
        if tftp_server_name is not None:
          self.tftp_server_name = tftp_server_name

    @property
    def boot_file_name(self):
        """
        Gets the boot_file_name of this V1DHCPOptions.
        If specified will pass option 67 to interface's DHCP server +optional

        :return: The boot_file_name of this V1DHCPOptions.
        :rtype: str
        """
        return self._boot_file_name

    @boot_file_name.setter
    def boot_file_name(self, boot_file_name):
        """
        Sets the boot_file_name of this V1DHCPOptions.
        If specified will pass option 67 to interface's DHCP server +optional

        :param boot_file_name: The boot_file_name of this V1DHCPOptions.
        :type: str
        """

        self._boot_file_name = boot_file_name

    @property
    def tftp_server_name(self):
        """
        Gets the tftp_server_name of this V1DHCPOptions.
        If specified will pass option 66 to interface's DHCP server +optional

        :return: The tftp_server_name of this V1DHCPOptions.
        :rtype: str
        """
        return self._tftp_server_name

    @tftp_server_name.setter
    def tftp_server_name(self, tftp_server_name):
        """
        Sets the tftp_server_name of this V1DHCPOptions.
        If specified will pass option 66 to interface's DHCP server +optional

        :param tftp_server_name: The tftp_server_name of this V1DHCPOptions.
        :type: str
        """

        self._tftp_server_name = tftp_server_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1DHCPOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
