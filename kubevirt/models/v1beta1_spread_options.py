# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1SpreadOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'across': 'str',
        'ratio': 'int'
    }

    attribute_map = {
        'across': 'across',
        'ratio': 'ratio'
    }

    def __init__(self, across=None, ratio=None):
        """
        V1beta1SpreadOptions - a model defined in Swagger
        """

        self._across = None
        self._ratio = None

        if across is not None:
          self.across = across
        if ratio is not None:
          self.ratio = ratio

    @property
    def across(self):
        """
        Gets the across of this V1beta1SpreadOptions.
        Across optionally defines how to spread vCPUs across the guest visible topology. Default: SocketsCores

        :return: The across of this V1beta1SpreadOptions.
        :rtype: str
        """
        return self._across

    @across.setter
    def across(self, across):
        """
        Sets the across of this V1beta1SpreadOptions.
        Across optionally defines how to spread vCPUs across the guest visible topology. Default: SocketsCores

        :param across: The across of this V1beta1SpreadOptions.
        :type: str
        """

        self._across = across

    @property
    def ratio(self):
        """
        Gets the ratio of this V1beta1SpreadOptions.
        Ratio optionally defines the ratio to spread vCPUs across the guest visible topology:  CoresThreads        - 1:2   - Controls the ratio of cores to threads. Only a ratio of 2 is currently accepted. SocketsCores        - 1:N   - Controls the ratio of socket to cores. SocketsCoresThreads - 1:N:2 - Controls the ratio of socket to cores. Each core providing 2 threads.  Default: 2

        :return: The ratio of this V1beta1SpreadOptions.
        :rtype: int
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """
        Sets the ratio of this V1beta1SpreadOptions.
        Ratio optionally defines the ratio to spread vCPUs across the guest visible topology:  CoresThreads        - 1:2   - Controls the ratio of cores to threads. Only a ratio of 2 is currently accepted. SocketsCores        - 1:N   - Controls the ratio of socket to cores. SocketsCoresThreads - 1:N:2 - Controls the ratio of socket to cores. Each core providing 2 threads.  Default: 2

        :param ratio: The ratio of this V1beta1SpreadOptions.
        :type: int
        """

        self._ratio = ratio

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1SpreadOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
