# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1VirtualMachineVolumeRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_volume_options': 'V1AddVolumeOptions',
        'remove_volume_options': 'V1RemoveVolumeOptions'
    }

    attribute_map = {
        'add_volume_options': 'addVolumeOptions',
        'remove_volume_options': 'removeVolumeOptions'
    }

    def __init__(self, add_volume_options=None, remove_volume_options=None):
        """
        V1VirtualMachineVolumeRequest - a model defined in Swagger
        """

        self._add_volume_options = None
        self._remove_volume_options = None

        if add_volume_options is not None:
          self.add_volume_options = add_volume_options
        if remove_volume_options is not None:
          self.remove_volume_options = remove_volume_options

    @property
    def add_volume_options(self):
        """
        Gets the add_volume_options of this V1VirtualMachineVolumeRequest.
        AddVolumeOptions when set indicates a volume should be added. The details within this field specify how to add the volume

        :return: The add_volume_options of this V1VirtualMachineVolumeRequest.
        :rtype: V1AddVolumeOptions
        """
        return self._add_volume_options

    @add_volume_options.setter
    def add_volume_options(self, add_volume_options):
        """
        Sets the add_volume_options of this V1VirtualMachineVolumeRequest.
        AddVolumeOptions when set indicates a volume should be added. The details within this field specify how to add the volume

        :param add_volume_options: The add_volume_options of this V1VirtualMachineVolumeRequest.
        :type: V1AddVolumeOptions
        """

        self._add_volume_options = add_volume_options

    @property
    def remove_volume_options(self):
        """
        Gets the remove_volume_options of this V1VirtualMachineVolumeRequest.
        RemoveVolumeOptions when set indicates a volume should be removed. The details within this field specify how to add the volume

        :return: The remove_volume_options of this V1VirtualMachineVolumeRequest.
        :rtype: V1RemoveVolumeOptions
        """
        return self._remove_volume_options

    @remove_volume_options.setter
    def remove_volume_options(self, remove_volume_options):
        """
        Sets the remove_volume_options of this V1VirtualMachineVolumeRequest.
        RemoveVolumeOptions when set indicates a volume should be removed. The details within this field specify how to add the volume

        :param remove_volume_options: The remove_volume_options of this V1VirtualMachineVolumeRequest.
        :type: V1RemoveVolumeOptions
        """

        self._remove_volume_options = remove_volume_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1VirtualMachineVolumeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
