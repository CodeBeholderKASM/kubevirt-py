# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1VirtualMachineInstanceFileSystem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disk': 'list[V1VirtualMachineInstanceFileSystemDisk]',
        'disk_name': 'str',
        'file_system_type': 'str',
        'mount_point': 'str',
        'total_bytes': 'int',
        'used_bytes': 'int'
    }

    attribute_map = {
        'disk': 'disk',
        'disk_name': 'diskName',
        'file_system_type': 'fileSystemType',
        'mount_point': 'mountPoint',
        'total_bytes': 'totalBytes',
        'used_bytes': 'usedBytes'
    }

    def __init__(self, disk=None, disk_name='', file_system_type='', mount_point='', total_bytes=0, used_bytes=0):
        """
        V1VirtualMachineInstanceFileSystem - a model defined in Swagger
        """

        self._disk = None
        self._disk_name = None
        self._file_system_type = None
        self._mount_point = None
        self._total_bytes = None
        self._used_bytes = None

        if disk is not None:
          self.disk = disk
        self.disk_name = disk_name
        self.file_system_type = file_system_type
        self.mount_point = mount_point
        self.total_bytes = total_bytes
        self.used_bytes = used_bytes

    @property
    def disk(self):
        """
        Gets the disk of this V1VirtualMachineInstanceFileSystem.

        :return: The disk of this V1VirtualMachineInstanceFileSystem.
        :rtype: list[V1VirtualMachineInstanceFileSystemDisk]
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """
        Sets the disk of this V1VirtualMachineInstanceFileSystem.

        :param disk: The disk of this V1VirtualMachineInstanceFileSystem.
        :type: list[V1VirtualMachineInstanceFileSystemDisk]
        """

        self._disk = disk

    @property
    def disk_name(self):
        """
        Gets the disk_name of this V1VirtualMachineInstanceFileSystem.

        :return: The disk_name of this V1VirtualMachineInstanceFileSystem.
        :rtype: str
        """
        return self._disk_name

    @disk_name.setter
    def disk_name(self, disk_name):
        """
        Sets the disk_name of this V1VirtualMachineInstanceFileSystem.

        :param disk_name: The disk_name of this V1VirtualMachineInstanceFileSystem.
        :type: str
        """
        if disk_name is None:
            raise ValueError("Invalid value for `disk_name`, must not be `None`")

        self._disk_name = disk_name

    @property
    def file_system_type(self):
        """
        Gets the file_system_type of this V1VirtualMachineInstanceFileSystem.

        :return: The file_system_type of this V1VirtualMachineInstanceFileSystem.
        :rtype: str
        """
        return self._file_system_type

    @file_system_type.setter
    def file_system_type(self, file_system_type):
        """
        Sets the file_system_type of this V1VirtualMachineInstanceFileSystem.

        :param file_system_type: The file_system_type of this V1VirtualMachineInstanceFileSystem.
        :type: str
        """
        if file_system_type is None:
            raise ValueError("Invalid value for `file_system_type`, must not be `None`")

        self._file_system_type = file_system_type

    @property
    def mount_point(self):
        """
        Gets the mount_point of this V1VirtualMachineInstanceFileSystem.

        :return: The mount_point of this V1VirtualMachineInstanceFileSystem.
        :rtype: str
        """
        return self._mount_point

    @mount_point.setter
    def mount_point(self, mount_point):
        """
        Sets the mount_point of this V1VirtualMachineInstanceFileSystem.

        :param mount_point: The mount_point of this V1VirtualMachineInstanceFileSystem.
        :type: str
        """
        if mount_point is None:
            raise ValueError("Invalid value for `mount_point`, must not be `None`")

        self._mount_point = mount_point

    @property
    def total_bytes(self):
        """
        Gets the total_bytes of this V1VirtualMachineInstanceFileSystem.

        :return: The total_bytes of this V1VirtualMachineInstanceFileSystem.
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """
        Sets the total_bytes of this V1VirtualMachineInstanceFileSystem.

        :param total_bytes: The total_bytes of this V1VirtualMachineInstanceFileSystem.
        :type: int
        """
        if total_bytes is None:
            raise ValueError("Invalid value for `total_bytes`, must not be `None`")

        self._total_bytes = total_bytes

    @property
    def used_bytes(self):
        """
        Gets the used_bytes of this V1VirtualMachineInstanceFileSystem.

        :return: The used_bytes of this V1VirtualMachineInstanceFileSystem.
        :rtype: int
        """
        return self._used_bytes

    @used_bytes.setter
    def used_bytes(self, used_bytes):
        """
        Sets the used_bytes of this V1VirtualMachineInstanceFileSystem.

        :param used_bytes: The used_bytes of this V1VirtualMachineInstanceFileSystem.
        :type: int
        """
        if used_bytes is None:
            raise ValueError("Invalid value for `used_bytes`, must not be `None`")

        self._used_bytes = used_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1VirtualMachineInstanceFileSystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
