# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1MediatedDevicesConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mediated_device_types': 'list[str]',
        'mediated_devices_types': 'list[str]',
        'node_mediated_device_types': 'list[V1NodeMediatedDeviceTypesConfig]'
    }

    attribute_map = {
        'mediated_device_types': 'mediatedDeviceTypes',
        'mediated_devices_types': 'mediatedDevicesTypes',
        'node_mediated_device_types': 'nodeMediatedDeviceTypes'
    }

    def __init__(self, mediated_device_types=None, mediated_devices_types=None, node_mediated_device_types=None):
        """
        V1MediatedDevicesConfiguration - a model defined in Swagger
        """

        self._mediated_device_types = None
        self._mediated_devices_types = None
        self._node_mediated_device_types = None

        if mediated_device_types is not None:
          self.mediated_device_types = mediated_device_types
        if mediated_devices_types is not None:
          self.mediated_devices_types = mediated_devices_types
        if node_mediated_device_types is not None:
          self.node_mediated_device_types = node_mediated_device_types

    @property
    def mediated_device_types(self):
        """
        Gets the mediated_device_types of this V1MediatedDevicesConfiguration.

        :return: The mediated_device_types of this V1MediatedDevicesConfiguration.
        :rtype: list[str]
        """
        return self._mediated_device_types

    @mediated_device_types.setter
    def mediated_device_types(self, mediated_device_types):
        """
        Sets the mediated_device_types of this V1MediatedDevicesConfiguration.

        :param mediated_device_types: The mediated_device_types of this V1MediatedDevicesConfiguration.
        :type: list[str]
        """

        self._mediated_device_types = mediated_device_types

    @property
    def mediated_devices_types(self):
        """
        Gets the mediated_devices_types of this V1MediatedDevicesConfiguration.
        Deprecated. Use mediatedDeviceTypes instead.

        :return: The mediated_devices_types of this V1MediatedDevicesConfiguration.
        :rtype: list[str]
        """
        return self._mediated_devices_types

    @mediated_devices_types.setter
    def mediated_devices_types(self, mediated_devices_types):
        """
        Sets the mediated_devices_types of this V1MediatedDevicesConfiguration.
        Deprecated. Use mediatedDeviceTypes instead.

        :param mediated_devices_types: The mediated_devices_types of this V1MediatedDevicesConfiguration.
        :type: list[str]
        """

        self._mediated_devices_types = mediated_devices_types

    @property
    def node_mediated_device_types(self):
        """
        Gets the node_mediated_device_types of this V1MediatedDevicesConfiguration.

        :return: The node_mediated_device_types of this V1MediatedDevicesConfiguration.
        :rtype: list[V1NodeMediatedDeviceTypesConfig]
        """
        return self._node_mediated_device_types

    @node_mediated_device_types.setter
    def node_mediated_device_types(self, node_mediated_device_types):
        """
        Sets the node_mediated_device_types of this V1MediatedDevicesConfiguration.

        :param node_mediated_device_types: The node_mediated_device_types of this V1MediatedDevicesConfiguration.
        :type: list[V1NodeMediatedDeviceTypesConfig]
        """

        self._node_mediated_device_types = node_mediated_device_types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1MediatedDevicesConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
