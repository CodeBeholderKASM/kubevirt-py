# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1Chassis(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'manufacturer': 'str',
        'serial': 'str',
        'sku': 'str',
        'version': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'manufacturer': 'manufacturer',
        'serial': 'serial',
        'sku': 'sku',
        'version': 'version'
    }

    def __init__(self, asset=None, manufacturer=None, serial=None, sku=None, version=None):
        """
        V1Chassis - a model defined in Swagger
        """

        self._asset = None
        self._manufacturer = None
        self._serial = None
        self._sku = None
        self._version = None

        if asset is not None:
          self.asset = asset
        if manufacturer is not None:
          self.manufacturer = manufacturer
        if serial is not None:
          self.serial = serial
        if sku is not None:
          self.sku = sku
        if version is not None:
          self.version = version

    @property
    def asset(self):
        """
        Gets the asset of this V1Chassis.

        :return: The asset of this V1Chassis.
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """
        Sets the asset of this V1Chassis.

        :param asset: The asset of this V1Chassis.
        :type: str
        """

        self._asset = asset

    @property
    def manufacturer(self):
        """
        Gets the manufacturer of this V1Chassis.

        :return: The manufacturer of this V1Chassis.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """
        Sets the manufacturer of this V1Chassis.

        :param manufacturer: The manufacturer of this V1Chassis.
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def serial(self):
        """
        Gets the serial of this V1Chassis.

        :return: The serial of this V1Chassis.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this V1Chassis.

        :param serial: The serial of this V1Chassis.
        :type: str
        """

        self._serial = serial

    @property
    def sku(self):
        """
        Gets the sku of this V1Chassis.

        :return: The sku of this V1Chassis.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this V1Chassis.

        :param sku: The sku of this V1Chassis.
        :type: str
        """

        self._sku = sku

    @property
    def version(self):
        """
        Gets the version of this V1Chassis.

        :return: The version of this V1Chassis.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this V1Chassis.

        :param version: The version of this V1Chassis.
        :type: str
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1Chassis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
