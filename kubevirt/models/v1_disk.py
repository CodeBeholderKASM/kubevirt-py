# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1Disk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cdrom': 'V1CDRomTarget',
        'disk': 'V1DiskTarget',
        'floppy': 'V1FloppyTarget',
        'lun': 'V1LunTarget',
        'name': 'str',
        'volume_name': 'str'
    }

    attribute_map = {
        'cdrom': 'cdrom',
        'disk': 'disk',
        'floppy': 'floppy',
        'lun': 'lun',
        'name': 'name',
        'volume_name': 'volumeName'
    }

    def __init__(self, cdrom=None, disk=None, floppy=None, lun=None, name=None, volume_name=None):
        """
        V1Disk - a model defined in Swagger
        """

        self._cdrom = None
        self._disk = None
        self._floppy = None
        self._lun = None
        self._name = None
        self._volume_name = None

        if cdrom is not None:
          self.cdrom = cdrom
        if disk is not None:
          self.disk = disk
        if floppy is not None:
          self.floppy = floppy
        if lun is not None:
          self.lun = lun
        self.name = name
        self.volume_name = volume_name

    @property
    def cdrom(self):
        """
        Gets the cdrom of this V1Disk.
        Attach a volume as a cdrom to the vm

        :return: The cdrom of this V1Disk.
        :rtype: V1CDRomTarget
        """
        return self._cdrom

    @cdrom.setter
    def cdrom(self, cdrom):
        """
        Sets the cdrom of this V1Disk.
        Attach a volume as a cdrom to the vm

        :param cdrom: The cdrom of this V1Disk.
        :type: V1CDRomTarget
        """

        self._cdrom = cdrom

    @property
    def disk(self):
        """
        Gets the disk of this V1Disk.
        Attach a volume as a disk to the vm

        :return: The disk of this V1Disk.
        :rtype: V1DiskTarget
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """
        Sets the disk of this V1Disk.
        Attach a volume as a disk to the vm

        :param disk: The disk of this V1Disk.
        :type: V1DiskTarget
        """

        self._disk = disk

    @property
    def floppy(self):
        """
        Gets the floppy of this V1Disk.
        Attach a volume as a floppy to the vm

        :return: The floppy of this V1Disk.
        :rtype: V1FloppyTarget
        """
        return self._floppy

    @floppy.setter
    def floppy(self, floppy):
        """
        Sets the floppy of this V1Disk.
        Attach a volume as a floppy to the vm

        :param floppy: The floppy of this V1Disk.
        :type: V1FloppyTarget
        """

        self._floppy = floppy

    @property
    def lun(self):
        """
        Gets the lun of this V1Disk.
        Attach a volume as a LUN to the vm

        :return: The lun of this V1Disk.
        :rtype: V1LunTarget
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """
        Sets the lun of this V1Disk.
        Attach a volume as a LUN to the vm

        :param lun: The lun of this V1Disk.
        :type: V1LunTarget
        """

        self._lun = lun

    @property
    def name(self):
        """
        Gets the name of this V1Disk.
        Name is the device name

        :return: The name of this V1Disk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1Disk.
        Name is the device name

        :param name: The name of this V1Disk.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def volume_name(self):
        """
        Gets the volume_name of this V1Disk.
        Name of the volume which is referenced Must match the Name of a Volume.

        :return: The volume_name of this V1Disk.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """
        Sets the volume_name of this V1Disk.
        Name of the volume which is referenced Must match the Name of a Volume.

        :param volume_name: The volume_name of this V1Disk.
        :type: str
        """
        if volume_name is None:
            raise ValueError("Invalid value for `volume_name`, must not be `None`")

        self._volume_name = volume_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1Disk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
