# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1ArchSpecificConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'emulated_machines': 'list[str]',
        'machine_type': 'str',
        'ovmf_path': 'str'
    }

    attribute_map = {
        'emulated_machines': 'emulatedMachines',
        'machine_type': 'machineType',
        'ovmf_path': 'ovmfPath'
    }

    def __init__(self, emulated_machines=None, machine_type=None, ovmf_path=None):
        """
        V1ArchSpecificConfiguration - a model defined in Swagger
        """

        self._emulated_machines = None
        self._machine_type = None
        self._ovmf_path = None

        if emulated_machines is not None:
          self.emulated_machines = emulated_machines
        if machine_type is not None:
          self.machine_type = machine_type
        if ovmf_path is not None:
          self.ovmf_path = ovmf_path

    @property
    def emulated_machines(self):
        """
        Gets the emulated_machines of this V1ArchSpecificConfiguration.

        :return: The emulated_machines of this V1ArchSpecificConfiguration.
        :rtype: list[str]
        """
        return self._emulated_machines

    @emulated_machines.setter
    def emulated_machines(self, emulated_machines):
        """
        Sets the emulated_machines of this V1ArchSpecificConfiguration.

        :param emulated_machines: The emulated_machines of this V1ArchSpecificConfiguration.
        :type: list[str]
        """

        self._emulated_machines = emulated_machines

    @property
    def machine_type(self):
        """
        Gets the machine_type of this V1ArchSpecificConfiguration.

        :return: The machine_type of this V1ArchSpecificConfiguration.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """
        Sets the machine_type of this V1ArchSpecificConfiguration.

        :param machine_type: The machine_type of this V1ArchSpecificConfiguration.
        :type: str
        """

        self._machine_type = machine_type

    @property
    def ovmf_path(self):
        """
        Gets the ovmf_path of this V1ArchSpecificConfiguration.

        :return: The ovmf_path of this V1ArchSpecificConfiguration.
        :rtype: str
        """
        return self._ovmf_path

    @ovmf_path.setter
    def ovmf_path(self, ovmf_path):
        """
        Sets the ovmf_path of this V1ArchSpecificConfiguration.

        :param ovmf_path: The ovmf_path of this V1ArchSpecificConfiguration.
        :type: str
        """

        self._ovmf_path = ovmf_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1ArchSpecificConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
