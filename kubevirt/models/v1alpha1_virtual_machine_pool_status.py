# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1alpha1VirtualMachinePoolStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions': 'list[V1alpha1VirtualMachinePoolCondition]',
        'label_selector': 'str',
        'replicas': 'int'
    }

    attribute_map = {
        'conditions': 'conditions',
        'label_selector': 'labelSelector',
        'replicas': 'replicas'
    }

    def __init__(self, conditions=None, label_selector=None, replicas=None):
        """
        V1alpha1VirtualMachinePoolStatus - a model defined in Swagger
        """

        self._conditions = None
        self._label_selector = None
        self._replicas = None

        if conditions is not None:
          self.conditions = conditions
        if label_selector is not None:
          self.label_selector = label_selector
        if replicas is not None:
          self.replicas = replicas

    @property
    def conditions(self):
        """
        Gets the conditions of this V1alpha1VirtualMachinePoolStatus.

        :return: The conditions of this V1alpha1VirtualMachinePoolStatus.
        :rtype: list[V1alpha1VirtualMachinePoolCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """
        Sets the conditions of this V1alpha1VirtualMachinePoolStatus.

        :param conditions: The conditions of this V1alpha1VirtualMachinePoolStatus.
        :type: list[V1alpha1VirtualMachinePoolCondition]
        """

        self._conditions = conditions

    @property
    def label_selector(self):
        """
        Gets the label_selector of this V1alpha1VirtualMachinePoolStatus.
        Canonical form of the label selector for HPA which consumes it through the scale subresource.

        :return: The label_selector of this V1alpha1VirtualMachinePoolStatus.
        :rtype: str
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector):
        """
        Sets the label_selector of this V1alpha1VirtualMachinePoolStatus.
        Canonical form of the label selector for HPA which consumes it through the scale subresource.

        :param label_selector: The label_selector of this V1alpha1VirtualMachinePoolStatus.
        :type: str
        """

        self._label_selector = label_selector

    @property
    def replicas(self):
        """
        Gets the replicas of this V1alpha1VirtualMachinePoolStatus.

        :return: The replicas of this V1alpha1VirtualMachinePoolStatus.
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """
        Sets the replicas of this V1alpha1VirtualMachinePoolStatus.

        :param replicas: The replicas of this V1alpha1VirtualMachinePoolStatus.
        :type: int
        """

        self._replicas = replicas

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1alpha1VirtualMachinePoolStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
