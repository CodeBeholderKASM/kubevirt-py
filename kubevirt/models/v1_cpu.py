# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1CPU(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cores': 'int',
        'dedicated_cpu_placement': 'bool',
        'features': 'list[V1CPUFeature]',
        'model': 'str',
        'sockets': 'int',
        'threads': 'int'
    }

    attribute_map = {
        'cores': 'cores',
        'dedicated_cpu_placement': 'dedicatedCpuPlacement',
        'features': 'features',
        'model': 'model',
        'sockets': 'sockets',
        'threads': 'threads'
    }

    def __init__(self, cores=None, dedicated_cpu_placement=None, features=None, model=None, sockets=None, threads=None):
        """
        V1CPU - a model defined in Swagger
        """

        self._cores = None
        self._dedicated_cpu_placement = None
        self._features = None
        self._model = None
        self._sockets = None
        self._threads = None

        if cores is not None:
          self.cores = cores
        if dedicated_cpu_placement is not None:
          self.dedicated_cpu_placement = dedicated_cpu_placement
        if features is not None:
          self.features = features
        if model is not None:
          self.model = model
        if sockets is not None:
          self.sockets = sockets
        if threads is not None:
          self.threads = threads

    @property
    def cores(self):
        """
        Gets the cores of this V1CPU.
        Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.

        :return: The cores of this V1CPU.
        :rtype: int
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """
        Sets the cores of this V1CPU.
        Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.

        :param cores: The cores of this V1CPU.
        :type: int
        """

        self._cores = cores

    @property
    def dedicated_cpu_placement(self):
        """
        Gets the dedicated_cpu_placement of this V1CPU.
        DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it. +optional

        :return: The dedicated_cpu_placement of this V1CPU.
        :rtype: bool
        """
        return self._dedicated_cpu_placement

    @dedicated_cpu_placement.setter
    def dedicated_cpu_placement(self, dedicated_cpu_placement):
        """
        Sets the dedicated_cpu_placement of this V1CPU.
        DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it. +optional

        :param dedicated_cpu_placement: The dedicated_cpu_placement of this V1CPU.
        :type: bool
        """

        self._dedicated_cpu_placement = dedicated_cpu_placement

    @property
    def features(self):
        """
        Gets the features of this V1CPU.
        Features specifies the CPU features list inside the VMI. +optional

        :return: The features of this V1CPU.
        :rtype: list[V1CPUFeature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """
        Sets the features of this V1CPU.
        Features specifies the CPU features list inside the VMI. +optional

        :param features: The features of this V1CPU.
        :type: list[V1CPUFeature]
        """

        self._features = features

    @property
    def model(self):
        """
        Gets the model of this V1CPU.
        Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \"host-passthrough\" to get the same CPU as the node and \"host-model\" to get CPU closest to the node one. Defaults to host-model. +optional

        :return: The model of this V1CPU.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this V1CPU.
        Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \"host-passthrough\" to get the same CPU as the node and \"host-model\" to get CPU closest to the node one. Defaults to host-model. +optional

        :param model: The model of this V1CPU.
        :type: str
        """

        self._model = model

    @property
    def sockets(self):
        """
        Gets the sockets of this V1CPU.
        Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.

        :return: The sockets of this V1CPU.
        :rtype: int
        """
        return self._sockets

    @sockets.setter
    def sockets(self, sockets):
        """
        Sets the sockets of this V1CPU.
        Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.

        :param sockets: The sockets of this V1CPU.
        :type: int
        """

        self._sockets = sockets

    @property
    def threads(self):
        """
        Gets the threads of this V1CPU.
        Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.

        :return: The threads of this V1CPU.
        :rtype: int
        """
        return self._threads

    @threads.setter
    def threads(self, threads):
        """
        Sets the threads of this V1CPU.
        Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.

        :param threads: The threads of this V1CPU.
        :type: int
        """

        self._threads = threads

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1CPU):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
