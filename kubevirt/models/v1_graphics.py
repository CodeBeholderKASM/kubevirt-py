# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1Graphics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_port': 'str',
        'default_mode': 'str',
        'listen': 'V1Listen',
        'passwd_valid_to': 'str',
        'port': 'int',
        'tls_port': 'int',
        'type': 'str'
    }

    attribute_map = {
        'auto_port': 'autoPort',
        'default_mode': 'defaultMode',
        'listen': 'listen',
        'passwd_valid_to': 'passwdValidTo',
        'port': 'port',
        'tls_port': 'tlsPort',
        'type': 'type'
    }

    def __init__(self, auto_port=None, default_mode=None, listen=None, passwd_valid_to=None, port=None, tls_port=None, type=None):
        """
        V1Graphics - a model defined in Swagger
        """

        self._auto_port = None
        self._default_mode = None
        self._listen = None
        self._passwd_valid_to = None
        self._port = None
        self._tls_port = None
        self._type = None

        if auto_port is not None:
          self.auto_port = auto_port
        if default_mode is not None:
          self.default_mode = default_mode
        if listen is not None:
          self.listen = listen
        if passwd_valid_to is not None:
          self.passwd_valid_to = passwd_valid_to
        if port is not None:
          self.port = port
        if tls_port is not None:
          self.tls_port = tls_port
        self.type = type

    @property
    def auto_port(self):
        """
        Gets the auto_port of this V1Graphics.

        :return: The auto_port of this V1Graphics.
        :rtype: str
        """
        return self._auto_port

    @auto_port.setter
    def auto_port(self, auto_port):
        """
        Sets the auto_port of this V1Graphics.

        :param auto_port: The auto_port of this V1Graphics.
        :type: str
        """

        self._auto_port = auto_port

    @property
    def default_mode(self):
        """
        Gets the default_mode of this V1Graphics.

        :return: The default_mode of this V1Graphics.
        :rtype: str
        """
        return self._default_mode

    @default_mode.setter
    def default_mode(self, default_mode):
        """
        Sets the default_mode of this V1Graphics.

        :param default_mode: The default_mode of this V1Graphics.
        :type: str
        """

        self._default_mode = default_mode

    @property
    def listen(self):
        """
        Gets the listen of this V1Graphics.

        :return: The listen of this V1Graphics.
        :rtype: V1Listen
        """
        return self._listen

    @listen.setter
    def listen(self, listen):
        """
        Sets the listen of this V1Graphics.

        :param listen: The listen of this V1Graphics.
        :type: V1Listen
        """

        self._listen = listen

    @property
    def passwd_valid_to(self):
        """
        Gets the passwd_valid_to of this V1Graphics.

        :return: The passwd_valid_to of this V1Graphics.
        :rtype: str
        """
        return self._passwd_valid_to

    @passwd_valid_to.setter
    def passwd_valid_to(self, passwd_valid_to):
        """
        Sets the passwd_valid_to of this V1Graphics.

        :param passwd_valid_to: The passwd_valid_to of this V1Graphics.
        :type: str
        """

        self._passwd_valid_to = passwd_valid_to

    @property
    def port(self):
        """
        Gets the port of this V1Graphics.

        :return: The port of this V1Graphics.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this V1Graphics.

        :param port: The port of this V1Graphics.
        :type: int
        """

        self._port = port

    @property
    def tls_port(self):
        """
        Gets the tls_port of this V1Graphics.

        :return: The tls_port of this V1Graphics.
        :rtype: int
        """
        return self._tls_port

    @tls_port.setter
    def tls_port(self, tls_port):
        """
        Sets the tls_port of this V1Graphics.

        :param tls_port: The tls_port of this V1Graphics.
        :type: int
        """

        self._tls_port = tls_port

    @property
    def type(self):
        """
        Gets the type of this V1Graphics.

        :return: The type of this V1Graphics.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1Graphics.

        :param type: The type of this V1Graphics.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1Graphics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
