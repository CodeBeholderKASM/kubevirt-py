# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1USBHostDevice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_resource_provider': 'bool',
        'resource_name': 'str',
        'selectors': 'list[V1USBSelector]'
    }

    attribute_map = {
        'external_resource_provider': 'externalResourceProvider',
        'resource_name': 'resourceName',
        'selectors': 'selectors'
    }

    def __init__(self, external_resource_provider=None, resource_name='', selectors=None):
        """
        V1USBHostDevice - a model defined in Swagger
        """

        self._external_resource_provider = None
        self._resource_name = None
        self._selectors = None

        if external_resource_provider is not None:
          self.external_resource_provider = external_resource_provider
        self.resource_name = resource_name
        if selectors is not None:
          self.selectors = selectors

    @property
    def external_resource_provider(self):
        """
        Gets the external_resource_provider of this V1USBHostDevice.
        If true, KubeVirt will leave the allocation and monitoring to an external device plugin

        :return: The external_resource_provider of this V1USBHostDevice.
        :rtype: bool
        """
        return self._external_resource_provider

    @external_resource_provider.setter
    def external_resource_provider(self, external_resource_provider):
        """
        Sets the external_resource_provider of this V1USBHostDevice.
        If true, KubeVirt will leave the allocation and monitoring to an external device plugin

        :param external_resource_provider: The external_resource_provider of this V1USBHostDevice.
        :type: bool
        """

        self._external_resource_provider = external_resource_provider

    @property
    def resource_name(self):
        """
        Gets the resource_name of this V1USBHostDevice.
        Identifies the list of USB host devices. e.g: kubevirt.io/storage, kubevirt.io/bootable-usb, etc

        :return: The resource_name of this V1USBHostDevice.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """
        Sets the resource_name of this V1USBHostDevice.
        Identifies the list of USB host devices. e.g: kubevirt.io/storage, kubevirt.io/bootable-usb, etc

        :param resource_name: The resource_name of this V1USBHostDevice.
        :type: str
        """
        if resource_name is None:
            raise ValueError("Invalid value for `resource_name`, must not be `None`")

        self._resource_name = resource_name

    @property
    def selectors(self):
        """
        Gets the selectors of this V1USBHostDevice.

        :return: The selectors of this V1USBHostDevice.
        :rtype: list[V1USBSelector]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """
        Sets the selectors of this V1USBHostDevice.

        :param selectors: The selectors of this V1USBHostDevice.
        :type: list[V1USBSelector]
        """

        self._selectors = selectors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1USBHostDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
