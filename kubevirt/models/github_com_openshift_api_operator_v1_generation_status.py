# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GithubComOpenshiftApiOperatorV1GenerationStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group': 'str',
        'hash': 'str',
        'last_generation': 'int',
        'name': 'str',
        'namespace': 'str',
        'resource': 'str'
    }

    attribute_map = {
        'group': 'group',
        'hash': 'hash',
        'last_generation': 'lastGeneration',
        'name': 'name',
        'namespace': 'namespace',
        'resource': 'resource'
    }

    def __init__(self, group=None, hash=None, last_generation=None, name=None, namespace=None, resource=None):
        """
        GithubComOpenshiftApiOperatorV1GenerationStatus - a model defined in Swagger
        """

        self._group = None
        self._hash = None
        self._last_generation = None
        self._name = None
        self._namespace = None
        self._resource = None

        self.group = group
        self.hash = hash
        self.last_generation = last_generation
        self.name = name
        self.namespace = namespace
        self.resource = resource

    @property
    def group(self):
        """
        Gets the group of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        group is the group of the thing you're tracking

        :return: The group of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        group is the group of the thing you're tracking

        :param group: The group of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :type: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def hash(self):
        """
        Gets the hash of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps

        :return: The hash of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps

        :param hash: The hash of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")

        self._hash = hash

    @property
    def last_generation(self):
        """
        Gets the last_generation of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        lastGeneration is the last generation of the workload controller involved

        :return: The last_generation of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :rtype: int
        """
        return self._last_generation

    @last_generation.setter
    def last_generation(self, last_generation):
        """
        Sets the last_generation of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        lastGeneration is the last generation of the workload controller involved

        :param last_generation: The last_generation of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :type: int
        """
        if last_generation is None:
            raise ValueError("Invalid value for `last_generation`, must not be `None`")

        self._last_generation = last_generation

    @property
    def name(self):
        """
        Gets the name of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        name is the name of the thing you're tracking

        :return: The name of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        name is the name of the thing you're tracking

        :param name: The name of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def namespace(self):
        """
        Gets the namespace of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        namespace is where the thing you're tracking is

        :return: The namespace of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """
        Sets the namespace of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        namespace is where the thing you're tracking is

        :param namespace: The namespace of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def resource(self):
        """
        Gets the resource of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        resource is the resource type of the thing you're tracking

        :return: The resource of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """
        Sets the resource of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        resource is the resource type of the thing you're tracking

        :param resource: The resource of this GithubComOpenshiftApiOperatorV1GenerationStatus.
        :type: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GithubComOpenshiftApiOperatorV1GenerationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
