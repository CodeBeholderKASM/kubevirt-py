# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1Volume(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_init_no_cloud': 'V1CloudInitNoCloudSource',
        'iscsi': 'V1ISCSIVolumeSource',
        'name': 'str',
        'persistent_volume_claim': 'V1PersistentVolumeClaimVolumeSource',
        'registry_disk': 'V1RegistryDiskSource'
    }

    attribute_map = {
        'cloud_init_no_cloud': 'cloudInitNoCloud',
        'iscsi': 'iscsi',
        'name': 'name',
        'persistent_volume_claim': 'persistentVolumeClaim',
        'registry_disk': 'registryDisk'
    }

    def __init__(self, cloud_init_no_cloud=None, iscsi=None, name=None, persistent_volume_claim=None, registry_disk=None):
        """
        V1Volume - a model defined in Swagger
        """

        self._cloud_init_no_cloud = None
        self._iscsi = None
        self._name = None
        self._persistent_volume_claim = None
        self._registry_disk = None

        if cloud_init_no_cloud is not None:
          self.cloud_init_no_cloud = cloud_init_no_cloud
        if iscsi is not None:
          self.iscsi = iscsi
        self.name = name
        if persistent_volume_claim is not None:
          self.persistent_volume_claim = persistent_volume_claim
        if registry_disk is not None:
          self.registry_disk = registry_disk

    @property
    def cloud_init_no_cloud(self):
        """
        Gets the cloud_init_no_cloud of this V1Volume.
        CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vm. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html +optional

        :return: The cloud_init_no_cloud of this V1Volume.
        :rtype: V1CloudInitNoCloudSource
        """
        return self._cloud_init_no_cloud

    @cloud_init_no_cloud.setter
    def cloud_init_no_cloud(self, cloud_init_no_cloud):
        """
        Sets the cloud_init_no_cloud of this V1Volume.
        CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vm. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html +optional

        :param cloud_init_no_cloud: The cloud_init_no_cloud of this V1Volume.
        :type: V1CloudInitNoCloudSource
        """

        self._cloud_init_no_cloud = cloud_init_no_cloud

    @property
    def iscsi(self):
        """
        Gets the iscsi of this V1Volume.
        ISCSI represents an ISCSI Disk resource which is directly attached to the vm via qemu. +optional

        :return: The iscsi of this V1Volume.
        :rtype: V1ISCSIVolumeSource
        """
        return self._iscsi

    @iscsi.setter
    def iscsi(self, iscsi):
        """
        Sets the iscsi of this V1Volume.
        ISCSI represents an ISCSI Disk resource which is directly attached to the vm via qemu. +optional

        :param iscsi: The iscsi of this V1Volume.
        :type: V1ISCSIVolumeSource
        """

        self._iscsi = iscsi

    @property
    def name(self):
        """
        Gets the name of this V1Volume.
        Volume's name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

        :return: The name of this V1Volume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1Volume.
        Volume's name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

        :param name: The name of this V1Volume.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def persistent_volume_claim(self):
        """
        Gets the persistent_volume_claim of this V1Volume.
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vm via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims +optional

        :return: The persistent_volume_claim of this V1Volume.
        :rtype: V1PersistentVolumeClaimVolumeSource
        """
        return self._persistent_volume_claim

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, persistent_volume_claim):
        """
        Sets the persistent_volume_claim of this V1Volume.
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vm via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims +optional

        :param persistent_volume_claim: The persistent_volume_claim of this V1Volume.
        :type: V1PersistentVolumeClaimVolumeSource
        """

        self._persistent_volume_claim = persistent_volume_claim

    @property
    def registry_disk(self):
        """
        Gets the registry_disk of this V1Volume.
        RegistryDisk references a docker image, embedding a qcow or raw disk More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html +optional

        :return: The registry_disk of this V1Volume.
        :rtype: V1RegistryDiskSource
        """
        return self._registry_disk

    @registry_disk.setter
    def registry_disk(self, registry_disk):
        """
        Sets the registry_disk of this V1Volume.
        RegistryDisk references a docker image, embedding a qcow or raw disk More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html +optional

        :param registry_disk: The registry_disk of this V1Volume.
        :type: V1RegistryDiskSource
        """

        self._registry_disk = registry_disk

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1Volume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
