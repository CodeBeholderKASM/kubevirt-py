# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1MigrationConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'completion_timeout_per_gi_b': 'int',
        'progress_timeout': 'int'
    }

    attribute_map = {
        'completion_timeout_per_gi_b': 'completionTimeoutPerGiB',
        'progress_timeout': 'progressTimeout'
    }

    def __init__(self, completion_timeout_per_gi_b=None, progress_timeout=None):
        """
        V1MigrationConfig - a model defined in Swagger
        """

        self._completion_timeout_per_gi_b = None
        self._progress_timeout = None

        if completion_timeout_per_gi_b is not None:
          self.completion_timeout_per_gi_b = completion_timeout_per_gi_b
        if progress_timeout is not None:
          self.progress_timeout = progress_timeout

    @property
    def completion_timeout_per_gi_b(self):
        """
        Gets the completion_timeout_per_gi_b of this V1MigrationConfig.
        The time for GiB of data to wait for the migration to be completed before aborting it

        :return: The completion_timeout_per_gi_b of this V1MigrationConfig.
        :rtype: int
        """
        return self._completion_timeout_per_gi_b

    @completion_timeout_per_gi_b.setter
    def completion_timeout_per_gi_b(self, completion_timeout_per_gi_b):
        """
        Sets the completion_timeout_per_gi_b of this V1MigrationConfig.
        The time for GiB of data to wait for the migration to be completed before aborting it

        :param completion_timeout_per_gi_b: The completion_timeout_per_gi_b of this V1MigrationConfig.
        :type: int
        """

        self._completion_timeout_per_gi_b = completion_timeout_per_gi_b

    @property
    def progress_timeout(self):
        """
        Gets the progress_timeout of this V1MigrationConfig.
        The time to wait for live migration to make progress in transferring data.

        :return: The progress_timeout of this V1MigrationConfig.
        :rtype: int
        """
        return self._progress_timeout

    @progress_timeout.setter
    def progress_timeout(self, progress_timeout):
        """
        Sets the progress_timeout of this V1MigrationConfig.
        The time to wait for live migration to make progress in transferring data.

        :param progress_timeout: The progress_timeout of this V1MigrationConfig.
        :type: int
        """

        self._progress_timeout = progress_timeout

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1MigrationConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
