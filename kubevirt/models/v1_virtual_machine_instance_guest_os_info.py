# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1VirtualMachineInstanceGuestOSInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'kernel_release': 'str',
        'kernel_version': 'str',
        'machine': 'str',
        'name': 'str',
        'pretty_name': 'str',
        'version': 'str',
        'version_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'kernel_release': 'kernelRelease',
        'kernel_version': 'kernelVersion',
        'machine': 'machine',
        'name': 'name',
        'pretty_name': 'prettyName',
        'version': 'version',
        'version_id': 'versionId'
    }

    def __init__(self, id=None, kernel_release=None, kernel_version=None, machine=None, name=None, pretty_name=None, version=None, version_id=None):
        """
        V1VirtualMachineInstanceGuestOSInfo - a model defined in Swagger
        """

        self._id = None
        self._kernel_release = None
        self._kernel_version = None
        self._machine = None
        self._name = None
        self._pretty_name = None
        self._version = None
        self._version_id = None

        if id is not None:
          self.id = id
        if kernel_release is not None:
          self.kernel_release = kernel_release
        if kernel_version is not None:
          self.kernel_version = kernel_version
        if machine is not None:
          self.machine = machine
        if name is not None:
          self.name = name
        if pretty_name is not None:
          self.pretty_name = pretty_name
        if version is not None:
          self.version = version
        if version_id is not None:
          self.version_id = version_id

    @property
    def id(self):
        """
        Gets the id of this V1VirtualMachineInstanceGuestOSInfo.
        Guest OS Id

        :return: The id of this V1VirtualMachineInstanceGuestOSInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this V1VirtualMachineInstanceGuestOSInfo.
        Guest OS Id

        :param id: The id of this V1VirtualMachineInstanceGuestOSInfo.
        :type: str
        """

        self._id = id

    @property
    def kernel_release(self):
        """
        Gets the kernel_release of this V1VirtualMachineInstanceGuestOSInfo.
        Guest OS Kernel Release

        :return: The kernel_release of this V1VirtualMachineInstanceGuestOSInfo.
        :rtype: str
        """
        return self._kernel_release

    @kernel_release.setter
    def kernel_release(self, kernel_release):
        """
        Sets the kernel_release of this V1VirtualMachineInstanceGuestOSInfo.
        Guest OS Kernel Release

        :param kernel_release: The kernel_release of this V1VirtualMachineInstanceGuestOSInfo.
        :type: str
        """

        self._kernel_release = kernel_release

    @property
    def kernel_version(self):
        """
        Gets the kernel_version of this V1VirtualMachineInstanceGuestOSInfo.
        Kernel version of the Guest OS

        :return: The kernel_version of this V1VirtualMachineInstanceGuestOSInfo.
        :rtype: str
        """
        return self._kernel_version

    @kernel_version.setter
    def kernel_version(self, kernel_version):
        """
        Sets the kernel_version of this V1VirtualMachineInstanceGuestOSInfo.
        Kernel version of the Guest OS

        :param kernel_version: The kernel_version of this V1VirtualMachineInstanceGuestOSInfo.
        :type: str
        """

        self._kernel_version = kernel_version

    @property
    def machine(self):
        """
        Gets the machine of this V1VirtualMachineInstanceGuestOSInfo.
        Machine type of the Guest OS

        :return: The machine of this V1VirtualMachineInstanceGuestOSInfo.
        :rtype: str
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """
        Sets the machine of this V1VirtualMachineInstanceGuestOSInfo.
        Machine type of the Guest OS

        :param machine: The machine of this V1VirtualMachineInstanceGuestOSInfo.
        :type: str
        """

        self._machine = machine

    @property
    def name(self):
        """
        Gets the name of this V1VirtualMachineInstanceGuestOSInfo.
        Name of the Guest OS

        :return: The name of this V1VirtualMachineInstanceGuestOSInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1VirtualMachineInstanceGuestOSInfo.
        Name of the Guest OS

        :param name: The name of this V1VirtualMachineInstanceGuestOSInfo.
        :type: str
        """

        self._name = name

    @property
    def pretty_name(self):
        """
        Gets the pretty_name of this V1VirtualMachineInstanceGuestOSInfo.
        Guest OS Pretty Name

        :return: The pretty_name of this V1VirtualMachineInstanceGuestOSInfo.
        :rtype: str
        """
        return self._pretty_name

    @pretty_name.setter
    def pretty_name(self, pretty_name):
        """
        Sets the pretty_name of this V1VirtualMachineInstanceGuestOSInfo.
        Guest OS Pretty Name

        :param pretty_name: The pretty_name of this V1VirtualMachineInstanceGuestOSInfo.
        :type: str
        """

        self._pretty_name = pretty_name

    @property
    def version(self):
        """
        Gets the version of this V1VirtualMachineInstanceGuestOSInfo.
        Guest OS Version

        :return: The version of this V1VirtualMachineInstanceGuestOSInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this V1VirtualMachineInstanceGuestOSInfo.
        Guest OS Version

        :param version: The version of this V1VirtualMachineInstanceGuestOSInfo.
        :type: str
        """

        self._version = version

    @property
    def version_id(self):
        """
        Gets the version_id of this V1VirtualMachineInstanceGuestOSInfo.
        Version ID of the Guest OS

        :return: The version_id of this V1VirtualMachineInstanceGuestOSInfo.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """
        Sets the version_id of this V1VirtualMachineInstanceGuestOSInfo.
        Version ID of the Guest OS

        :param version_id: The version_id of this V1VirtualMachineInstanceGuestOSInfo.
        :type: str
        """

        self._version_id = version_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1VirtualMachineInstanceGuestOSInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
