# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1HostDisk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity': 'K8sIoApimachineryPkgApiResourceQuantity',
        'path': 'str',
        'shared': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'capacity': 'capacity',
        'path': 'path',
        'shared': 'shared',
        'type': 'type'
    }

    def __init__(self, capacity=None, path=None, shared=None, type=None):
        """
        V1HostDisk - a model defined in Swagger
        """

        self._capacity = None
        self._path = None
        self._shared = None
        self._type = None

        if capacity is not None:
          self.capacity = capacity
        self.path = path
        if shared is not None:
          self.shared = shared
        self.type = type

    @property
    def capacity(self):
        """
        Gets the capacity of this V1HostDisk.
        Capacity of the sparse disk

        :return: The capacity of this V1HostDisk.
        :rtype: K8sIoApimachineryPkgApiResourceQuantity
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """
        Sets the capacity of this V1HostDisk.
        Capacity of the sparse disk

        :param capacity: The capacity of this V1HostDisk.
        :type: K8sIoApimachineryPkgApiResourceQuantity
        """

        self._capacity = capacity

    @property
    def path(self):
        """
        Gets the path of this V1HostDisk.
        The path to HostDisk image located on the cluster

        :return: The path of this V1HostDisk.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this V1HostDisk.
        The path to HostDisk image located on the cluster

        :param path: The path of this V1HostDisk.
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def shared(self):
        """
        Gets the shared of this V1HostDisk.
        Shared indicate whether the path is shared between nodes

        :return: The shared of this V1HostDisk.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """
        Sets the shared of this V1HostDisk.
        Shared indicate whether the path is shared between nodes

        :param shared: The shared of this V1HostDisk.
        :type: bool
        """

        self._shared = shared

    @property
    def type(self):
        """
        Gets the type of this V1HostDisk.
        Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate'

        :return: The type of this V1HostDisk.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1HostDisk.
        Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate'

        :param type: The type of this V1HostDisk.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1HostDisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
